swagger: "2.0"
info:
  title: Bank Argent API documentation # Titre de l'API
  description: Contains all available API endpoints in this codebase # Description générale de l'API
  version: "1.0.0" # Version de l'API
  termsOfService: "http://swagger.io/terms/" # Conditions d'utilisation
host: localhost:3001 # Hôte où l'API est accessible
basePath: /api/v1 # Chemin de base de l'API
schemes:
  - http # Protocole pris en charge (HTTP)

paths:
  /user/login: # Chemin pour l'endpoint de connexion utilisateur
    post: # Méthode HTTP POST pour cette route
      tags:
        - User Module # Tag pour le module utilisateur
      summary: Login # Résumé de la fonctionnalité de cette route
      description: API for Login # Description détaillée de la route
      parameters:
        - in: body # Paramètre dans le corps de la requête
          name: body # Nom du paramètre
          description: Login Payload # Description du paramètre
          required: true # Le paramètre est requis
          schema:
            $ref: "#/definitions/Login" # Référence à la définition de modèle Login
      produces:
        - application/json # Type de contenu produit
      responses:
        "200": # Réponse HTTP 200 (OK)
          description: Login Successfully # Description de la réponse
          schema:
            $ref: "#/definitions/LoginResponse" # Référence à la définition de modèle LoginResponse
        "400": # Réponse HTTP 400 (Bad Request)
          description: Invalid Fields # Description de la réponse
        "500": # Réponse HTTP 500 (Internal Server Error)
          description: Internal Server Error # Description de la réponse

  /user/signup: # Chemin pour l'endpoint d'inscription utilisateur
    post: # Méthode HTTP POST pour cette route
      tags:
        - User Module # Tag pour le module utilisateur
      summary: Signup # Résumé de la fonctionnalité de cette route
      description: API for Signup # Description détaillée de la route
      parameters:
        - in: body # Paramètre dans le corps de la requête
          name: body # Nom du paramètre
          description: Signup Payload # Description du paramètre
          required: true # Le paramètre est requis
          schema:
            $ref: "#/definitions/User" # Référence à la définition de modèle User
      produces:
        - application/json # Type de contenu produit
      responses:
        "200": # Réponse HTTP 200 (OK)
          description: Signup Successfully # Description de la réponse
          schema:
            $ref: "#/definitions/ApiResponse" # Référence à la définition de modèle ApiResponse
        "400": # Réponse HTTP 400 (Bad Request)
          description: Invalid Fields # Description de la réponse
        "500": # Réponse HTTP 500 (Internal Server Error)
          description: Internal Server Error # Description de la réponse

  /user/profile: # Chemin pour l'endpoint de profil utilisateur
    post: # Méthode HTTP POST pour cette route
      security:
        - Bearer: [] # Schéma de sécurité utilisé pour cette route
      tags:
        - User Module # Tag pour le module utilisateur
      summary: User Profile API # Résumé de la fonctionnalité de cette route
      description: API for fetching a user profile # Description détaillée de la route
      responses:
        "200": # Réponse HTTP 200 (OK)
          description: User profile retrieved successully # Description de la réponse
          schema:
            $ref: "#/definitions/ApiResponse" # Référence à la définition de modèle ApiResponse
        "400": # Réponse HTTP 400 (Bad Request)
          description: Invalid Fields # Description de la réponse
        "500": # Réponse HTTP 500 (Internal Server Error)
          description: Internal Server Error # Description de la réponse
    put: # Méthode HTTP PUT pour cette route
      security:
        - Bearer: [] # Schéma de sécurité utilisé pour cette route
      tags:
        - User Module # Tag pour le module utilisateur
      summary: User Profile API # Résumé de la fonctionnalité de cette route
      description: API for updating a user profile # Description détaillée de la route
      parameters:
        - in: body # Paramètre dans le corps de la requête
          name: body # Nom du paramètre
          description: Update user profile attributes # Description du paramètre
          required: true # Le paramètre est requis
          schema:
            $ref: "#/definitions/UserProfile" # Référence à la définition de modèle UserProfile
      produces:
        - application/json # Type de contenu produit
      responses:
        "200": # Réponse HTTP 200 (OK)
          description: User profile retrieved successully # Description de la réponse
          schema:
            $ref: "#/definitions/ApiResponse" # Référence à la définition de modèle ApiResponse
        "400": # Réponse HTTP 400 (Bad Request)
          description: Invalid Fields # Description de la réponse
        "500": # Réponse HTTP 500 (Internal Server Error)
          description: Internal Server Error # Description de la réponse

  /user/accounts: # Chemin pour l'endpoint des comptes utilisateur
    get: # Méthode HTTP GET pour cette route
      security:
        - Bearer: [] # Schéma de sécurité utilisé pour cette route
      tags:
        - Transaction Module # Tag pour le module de transaction
      summary: User Account API # Résumé de la fonctionnalité de cette route
      description: API for retrieving all user account # Description détaillée de la route
      parameters:
        - in: header # Paramètre dans l'en-tête de la requête
          name: token # Nom du paramètre
          description: Bearer Token # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
      produces:
        - application/json # Type de contenu produit
      responses:
        "200": # Réponse HTTP 200 (OK)
          description: The transactions have been successfully retrieved. # Description de la réponse
          schema:
            type: array # Type de données retournées (tableau)
            items: { $ref: "#/definitions/UserAccount" } # Référence à la définition de modèle UserAccount
        "400": # Réponse HTTP 400 (Bad Request)
          description: Invalid Fields # Description de la réponse en cas de champs invalides
        "401": # Réponse HTTP 401 (Unauthorized)
          description: UnAuthorized # Description de la réponse en cas d'autorisation non accordée
        "500": # Réponse HTTP 500 (Internal Server Error)
          description: Internal Server Error # Description de la réponse en cas d'erreur interne du serveur

  /user/{account_id}/transactions: # Chemin pour l'endpoint des transactions utilisateur
    get: # Méthode HTTP GET pour cette route
      security:
        - Bearer: [] # Schéma de sécurité utilisé pour cette route
      tags:
        - Transaction Module # Tag pour le module de transaction
      summary: User Account API # Résumé de la fonctionnalité de cette route
      description: API for retrieving user transactions # Description détaillée de la route
      parameters:
        - in: header # Paramètre dans l'en-tête de la requête
          name: token # Nom du paramètre
          description: Bearer Token # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
        - in: path # Paramètre dans le chemin de la requête
          name: account_id # Nom du paramètre
          description: ID of the Account # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
        - in: query # Paramètre dans la query string de la requête
          name: month # Nom du paramètre
          description: Filter transactions for a specific month (2024-01) # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
      produces:
        - application/json # Type de contenu produit
      responses:
        "200": # Réponse HTTP 200 (OK)
          description: The transactions have been successfully retrieved. # Description de la réponse
          schema:
            type: array # Type de données retournées (tableau)
            items: { $ref: "#/definitions/UserTransaction" } # Référence à la définition de modèle UserTransaction
        "400": # Réponse HTTP 400 (Bad Request)
          description: Invalid Fields # Description de la réponse en cas de champs invalides
        "401": # Réponse HTTP 401 (Unauthorized)
          description: UnAuthorized # Description de la réponse en cas d'autorisation non accordée
        "404": # Réponse HTTP 404 (Not Found)
          description: Not Found # Description de la réponse en cas de ressource non trouvée
        "500": # Réponse HTTP 500 (Internal Server Error)
          description: Internal Server Error # Description de la réponse en cas d'erreur interne du serveur

  /user/{account_id}/transactions/{transaction_id}: # Chemin pour l'endpoint d'une transaction utilisateur spécifique
    get: # Méthode HTTP GET pour cette route
      security:
        - Bearer: [] # Schéma de sécurité utilisé pour cette route
      tags:
        - Transaction Module # Tag pour le module de transaction
      summary: User Transaction API # Résumé de la fonctionnalité de cette route
      description: API for retrieving a user transaction # Description détaillée de la route
      parameters:
        - in: path # Paramètre dans le chemin de la requête
          name: account_id # Nom du paramètre
          description: ID Account # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
        - in: path # Paramètre dans le chemin de la requête
          name: transaction_id # Nom du paramètre
          description: ID of the transaction to be updated # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
      produces:
        - application/json # Type de contenu produit
      responses:
        "200": # Réponse HTTP 200 (OK)
          description: The transactions have been successfully retrieved. # Description de la réponse
          schema:
            $ref: "#/definitions/UserTransaction" # Référence à la définition de modèle UserTransaction
        "400": # Réponse HTTP 400 (Bad Request)
          description: Invalid Fields # Description de la réponse en cas de champs invalides
        "401": # Réponse HTTP 401 (Unauthorized)
          description: UnAuthorized # Description de la réponse en cas d'autorisation non accordée
        "404": # Réponse HTTP 404 (Not Found)
          description: Not Found # Description de la réponse en cas de ressource non trouvée
        "500": # Réponse HTTP 500 (Internal Server Error)
          description: Internal Server Error # Description de la réponse en cas d'erreur interne du serveur
    put: # Méthode HTTP PUT pour cette route
      security:
        - Bearer: [] # Schéma de sécurité utilisé pour cette route
      tags:
        - Transaction Module # Tag pour le module de transaction
      summary: User Transaction API # Résumé de la fonctionnalité de cette route
      description: API for updating a transaction # Description détaillée de cette route
      parameters:
        - in: path # Paramètre dans le chemin de la requête
          name: account_id # Nom du paramètre
          description: ID of the user account # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
        - in: path # Paramètre dans le chemin de la requête
          name: transaction_id # Nom du paramètre
          description: ID of the transaction to update # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
        - in: header # Paramètre dans l'en-tête de la requête
          name: token # Nom du paramètre
          description: Bearer Token # Description du paramètre
          required: true # Le paramètre est requis
          type: string # Type de données attendu
        - in: body # Paramètre dans le corps de la requête
          name: body # Nom du paramètre
          description: Update Transaction attributes # Description du paramètre
          required: true # Le paramètre est requis
          schema:
            $ref: "#/definitions/UpdateTransaction" # Référence à la définition de modèle UpdateTransaction
      produces:
        - application/json # Type de contenu produit
      responses:
        "200": # Réponse HTTP 200 (OK)
          description: Transaction updated # Description de la réponse
          schema:
            $ref: "#/definitions/UpdateTransaction" # Référence à la définition de modèle UpdateTransaction
        "400": # Réponse HTTP 400 (Bad Request)
          description: Invalid Fields # Description de la réponse en cas de champs invalides
        "404": # Réponse HTTP 404 (Not Found)
          description: Not Found # Description de la réponse en cas de ressource non trouvée
        "500": # Réponse HTTP 500 (Internal Server Error)
          description: Internal Server Error # Description de la réponse en cas d'erreur interne du serveur

securityDefinitions: # Définitions de sécurité utilisées dans l'API
  Bearer: # Schéma d'authentification Bearer Token
    type: apiKey # Type d'authentification
    name: Authorization # Nom de l'en-tête
    in: header # Emplacement de l'authentification

definitions: # Définitions de modèles utilisées dans l'API
  User: # Modèle de données utilisateur
    properties: # Propriétés du modèle
      email: # Propriété email
        type: string # Type de données
        description: user email # Description de la propriété
      password: # Propriété password
        type: string # Type de données
        description: user password # Description de la propriété
      firstName: # Propriété firstName
        type: string # Type de données
        description: user first name # Description de la propriété
      lastName: # Propriété lastName
        type: string # Type de données
        description: user last name # Description de la propriété
      userName: # Propriété userName
        type: string # Type de données
        description: user public name # Description de la propriété
  Login: # Modèle de données pour la connexion utilisateur
    properties: # Propriétés du modèle
      email: # Propriété email
        type: string # Type de données
        description: user email # Description de la propriété
      password: # Propriété password
        type: string # Type de données
        description: user password # Description de la propriété
  ApiResponse: # Modèle de réponse API générale
    type: object # Type de données
    properties: # Propriétés du modèle
      status: # Propriété status
        type: integer # Type de données
      message: # Propriété message
        type: string # Type de données
      body: # Propriété body
        type: object # Type de données
        properties: # Propriétés du modèle
          id: # Propriété id
            type: string # Type de données
          email: # Propriété email
            type: string # Type de données
  LoginResponse: # Modèle de réponse pour la connexion utilisateur
    type: object # Type de données
    properties: # Propriétés du modèle
      token: # Propriété token
        type: string # Type de données
  UserProfile: # Modèle de données pour le profil utilisateur
    type: object # Type de données
    properties: # Propriétés du modèle
      userName: # Propriété userName
        type: string # Type de données
  UserAccount: # Modèle de données pour le compte utilisateur
    type: object # Type de données
    properties: # Propriétés du modèle
      account_id: # Propriété account_id
        type: string # Type de données
      balance: # Propriété balance
        type: number # Type de données
        format: float # Format des données (nombre à virgule flottante)
    required: # Propriétés requises
      - account_id # Propriété account_id
      - balance # Propriété balance
    example: # Exemple de données pour ce modèle
      account_id: "123456" # Exemple d'ID de compte
      balance: 1000.50 # Exemple de solde
  UserTransaction: # Modèle de données pour une transaction utilisateur
    type: object # Type de données
    properties: # Propriétés du modèle
      transaction_id: # Propriété transaction_id
        type: string # Type de données
      date: # Propriété date
        type: string # Type de données
        format: date # Format des données (date)
      description: # Propriété description
        type: object # Type de données
        properties: # Propriétés du modèle
          transaction_type: # Propriété transaction_type
            type: string # Type de données
          category: # Propriété category
            type: string # Type de données
          note: # Propriété note
            type: string # Type de données
      amount: # Propriété amount
        type: number # Type de données
        format: float # Format des données (nombre à virgule flottante)
      balance: # Propriété balance
        type: number # Type de données
        format: float # Format des données (nombre à virgule flottante)
  UpdateTransaction: # Modèle de données pour la mise à jour d'une transaction
    type: object # Type de données
    properties: # Propriétés du modèle
      transaction_type: # Propriété transaction_type
        type: string # Type de données
      category: # Propriété category
        type: string # Type de données
      note: # Propriété note
        type: string # Type de données
